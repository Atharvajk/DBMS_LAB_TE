--------------------------------------------------------------------------------------------------------------------
DBMS Lab Assignment No 10
--------------------------------------------------------------------------------------------------------------------

Name: Atharva JItendra Khodke
Roll No: 31429
Class: TE04
Batch:  L4
--------------------------------------------------------------------------------------------------------------------

Tittle:MongoDB Aggregation and Indexing:
Design and Develop MongoDB Queries using aggregation and
indexing with suitable example using MongoDB

--------------------------------------------------------------------------------------------------------------------
Code:
--------------------------------------------------------------------------------------------------------------------
•	Aggregation

--------------------------------------------------------------------------------------------------------------------
1.	Creating and Inserting data into the collection.
--------------------------------------------------------------------------------------------------------------------

	db.products.insertMany([
  	{ product_id: 1, name: "Laptop", category: "Electronics", price: 800, manufacturer: 		"Dell" },
  	{ product_id: 2, name: "Phone", category: "Electronics", price: 500, manufacturer: 		"Samsung" },
  	{ product_id: 3, name: "Chair", category: "Furniture", price: 50, manufacturer: 			"IKEA" },
  	{ product_id: 4, name: "Tablet", category: "Electronics", price: 300, manufacturer: 		"Apple" },
  	{ product_id: 5, name: "Sofa", category: "Furniture", price: 400, manufacturer: 	"Ashley" }
	]);

--------------------------------------------------------------------------------------------------------------------
2.	Find products with a price less than $400 and sort by price.
--------------------------------------------------------------------------------------------------------------------

	db.products.find({ price: { $lt: 400 } }).sort({ price: 1 });

	Output:-
	{ "_id": 3, "name": "Chair", "category": "Furniture", "price": 50, "manufacturer": 	"IKEA" }
	{ "_id": 4, "name": "Tablet", "category": "Electronics", "price": 300, "manufacturer": 		"Apple" }
	{ "_id": 5, "name": "Sofa", "category": "Furniture", "price": 400, "manufacturer": 	"Ashley" }

--------------------------------------------------------------------------------------------------------------------
3.	Group products by category and calculate the average price for each category.
--------------------------------------------------------------------------------------------------------------------

	db.products.aggregate([
  	{ $group: { _id: "$category", avgPrice: { $avg: "$price" } } }
	]);


	Output:-
	{ "_id": "Furniture", "avgPrice": 225 }
	{ "_id": "Electronics", "avgPrice": 533.3333333333334 }


--------------------------------------------------------------------------------------------------------------------
4.	Find the most expensive product in each category.
--------------------------------------------------------------------------------------------------------------------

	db.products.aggregate([
  	{ $group: { _id: "$category", maxPrice: { $max: "$price" } } }
	]);

	Output:-
	{ "_id": "Furniture", "maxPrice": 400 }
	{ "_id": "Electronics", "maxPrice": 800 }


--------------------------------------------------------------------------------------------------------------------
5.	Project only the product name and manufacturer for products with a price greater than $300.
--------------------------------------------------------------------------------------------------------------------

	db.products.aggregate([
  	{ $match: { price: { $gt: 300 } } },
  	{ $project: { _id: 0, name: 1, manufacturer: 1 } }
	]);

	Output:-
	{ "name": "Laptop", "manufacturer": "Dell" }
	{ "name": "Phone", "manufacturer": "Samsung" }
	{ "name": "Sofa", "manufacturer": "Ashley" }


--------------------------------------------------------------------------------------------------------------------
6.	Sort products by the price in descending order and limit the result to the top 3 products.
--------------------------------------------------------------------------------------------------------------------

	db.products.aggregate([
  	{ $sort: { price: -1 } },
  	{ $limit: 3 }
	]);

	Output:-
	{ "_id": 1, "name": "Laptop", "category": "Electronics", "price": 800, 	"manufacturer": "Dell" }
	{ "_id": 2, "name": "Phone", "category": "Electronics", "price": 500, 	"manufacturer": "Samsung" }
	{ "_id": 5, "name": "Sofa", "category": "Furniture", "price": 400, 	"manufacturer": "Ashley" }

--------------------------------------------------------------------------------------------------------------------
•	Indexing
--------------------------------------------------------------------------------------------------------------------

1.	Single-Key Index
--------------------------------------------------------------------------------------------------------------------
	
	db.products.createIndex({ product_id: 1 });

	Output:-
	{
   	"createdCollectionAutomatically" : false,
   	"numIndexesBefore" : 1,
   	"numIndexesAfter" : 2,
   	"ok" : 1
	}

--------------------------------------------------------------------------------------------------------------------
2.	Compound-Key Index
--------------------------------------------------------------------------------------------------------------------
	
	db.products.createIndex({ category: 1, price: 1 });

	Output:-
	{
   	"createdCollectionAutomatically" : false,
   	"numIndexesBefore" : 1,
   	"numIndexesAfter" : 2,
   	"ok" : 1
	}

--------------------------------------------------------------------------------------------------------------------
3.	Unique Index
--------------------------------------------------------------------------------------------------------------------

	db.products.createIndex({ name: 1 }, { unique: true });

	Output:-
	{
   	"createdCollectionAutomatically" : false,
   	"numIndexesBefore" : 1,
   	"numIndexesAfter" : 2,
   	"ok" : 1
	}

